






{- -- It seems like we should still want Wrapped for something....
class Wrapped w where
  -- | Unwrap a `Located` or a `Faceted`. Can error if misused.
  unwrap' :: Member l ls -> w ls a -> a

instance Wrapped Located where
  unwrap' = unwrap . consSub nobody

instance Wrapped Faceted where
  unwrap' = mine
-}


{-  -- These are probably useless...
-- | Unwrap a `Faceted` value.
mine :: Member l ls -> Faceted ls a -> a
mine l (FacetF f) = unwrap refl $ f l

-- | Use a `Located` as a `Faceted`.
fracture :: forall ls a. (KnownSymbols ls) => Located ls a -> Faceted ls a
fracture a = FacetF \_ -> case a of
                            Empty -> Empty
                            Wrap a' -> Wrap a'
-}
